#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re

apelido_conexao = {}
buffer = {}
canais = {}

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if conexao not in buffer:
        buffer[conexao] = b''
    if dados == b'':
        return sair(conexao)
    if b'\r\n' not in buffer[conexao]+dados:
        buffer[conexao] += dados
        return
    dados = buffer[conexao] + dados
    while b'\r\n' in dados:    
        linha, dados = dados.split(b'\r\n', 1)
        print(conexao, linha)
        conexao_destino, mensagem = msg(conexao,linha + b'\r\n')
        if(mensagem is not None):
            conexao_destino.enviar(mensagem)

    buffer[conexao] += dados

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

def msg(conexao,mensagem):
    ping = re.match(br'^PING\s+(\S+)\r\n$', mensagem)
    nick = re.match(br'^NICK\s+(\S+)\r\n$', mensagem)
    priv = re.match(br'^PRIVMSG\s+(\S+)\s+:(\S+)\r\n$', mensagem)
    join = re.match(br'^JOIN\s+(\S+)\r\n', mensagem)
    if ping:
        payload = ping.group(1)
        return conexao,b':server PONG server :' + payload + b'\r\n'
    elif nick:
        apelido = nick.group(1)
        if validar_nome(apelido):
            lower_apelidos = {k.lower() for k in apelido_conexao}
            if(apelido.lower() not in lower_apelidos):
                if(conexao in apelido_conexao.values()):
                    for apelido_antigo, value in apelido_conexao.items():
                        if value == conexao:
                            del apelido_conexao[apelido_antigo]
                            apelido_conexao[apelido] = conexao
                            return conexao,b':' + apelido_antigo + b' NICK ' + apelido + b'\r\n'
                else:
                    apelido_conexao[apelido] = conexao
                    return conexao,b':server 001 ' + apelido + b' :Welcome' + b'\r\n' + b':server 422 ' + apelido + b' :MOTD File is missing\r\n'
            else:
                if(conexao in apelido_conexao.values()):
                    for apelido_atual, value in apelido_conexao.items():
                        if value == conexao:
                            return conexao, b':server 433 ' + apelido_atual + b' ' + apelido + b' :Nickname is already in use\r\n'
                return conexao, b':server 433 * ' + apelido + b' :Nickname is already in use\r\n'
        return conexao, b':server 432 * ' + apelido + b' :Erroneous nickname\r\n'
    elif priv:
        dest = priv.group(1)
        conteudo = priv.group(2)    
        # Verificar se o destinatário é um canal
        if dest.startswith(b'#'):
            nome_canal = dest.lower()
            if nome_canal in canais:  # Verifica se o canal existe
                remetente = None
                for a, c in apelido_conexao.items():
                    if c == conexao:
                        remetente = a
                        break
                if not remetente:
                    return None, None  # Ignorar se o remetente não tiver apelido registradO

                mensagem_enviar = b':' + remetente + b' PRIVMSG ' + dest + b' :' + conteudo + b'\r\n'
                # Enviar a mensagem para todos os membros do canal, exceto o remetente
                for membro in canais[nome_canal]:
                    if membro != conexao:  # Não enviar para si mesmo
                        membro.enviar(mensagem_enviar)
                return None, None  # Não precisa retornar mensagem para o remetente
        else:
            for destinatario, value in apelido_conexao.items(): # Verifica se o destinatário tem uma conexão estabelecida
                if destinatario.lower() == dest.lower():
                    dest = destinatario
            if dest:
                apelidos_lower = {n.lower() for n in apelido_conexao} # Torna a verificação insensúvel a case
                if dest.lower() in apelidos_lower:
                    for remetente, value in apelido_conexao.items():
                        if value == conexao:
                            return apelido_conexao[dest], b':' + remetente + b' PRIVMSG ' + dest + b' :' + conteudo + b'\r\n'
            return None, None
    elif join:
        canal = join.group(1)
        if canal[0:1] != b'#' or not validar_nome(canal[1:]):
            return conexao, b':server 403 ' + canal + b' :No such channel\r\n'

        # pegar apelido do usuário
        apelido = None
        for a, c in apelido_conexao.items():
            if c == conexao:
                apelido = a
                break
        if not apelido:
            return None, None  # ignorar se ainda não tiver apelido

        nome_canal = canal.lower()

        if nome_canal not in canais:
            canais[nome_canal] = set()
        canais[nome_canal].add(conexao)

        # Mensagem JOIN para todos do canal
        for membro in canais[nome_canal]:
                membro.enviar(b':' + apelido + b' JOIN :' + canal + b'\r\n')

        # Enviar lista de usuários do canal para quem acabou de entrar
        nomes_usuarios = ' '.join(sorted([apelido.decode() for apelido, conn in apelido_conexao.items() if conn in canais[nome_canal]]))

        conexao.enviar(b':server 353 ' + apelido + b' = ' + canal + b' :' + nomes_usuarios.encode() + b'\r\n')
        conexao.enviar(b':server 366 ' + apelido + b' ' + canal + b' :End of /NAMES list.\r\n')    
             
    return None, None
servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()